Please complete the program while keeping interfaces and implementations seperated.

The program implements a class called :cpp:`List`, which can store any number of :cpp:`std::string` objects, and satisfies the following invariants,

- :cpp:`std::string* data_`

  - The member that holds all :cpp:`std::string` objects.

- :cpp:`int size_`

  - The member that indicates the amount of :cpp:`std::string` objects; if no object exists, :cpp:`size_ == 0`.

- Element uniqueness

  - For any two different objects :cpp:`string1` and :cpp:`string2` holded by :cpp:`data_`, :cpp:`string1 == string2` (equality) should not be true.
  - Also, when inserting a new object, the insertion should not happen if there's already an equal object.

You should implement the following functions for it,

- Constructor :cpp:`List(std::string* data, int size)`

  - Insert all elements inside :cpp:`[data, data + size)` into :cpp:`data_`.

- Copy constructor
- Copy assignment
- :cpp:`auto operator+=(List const& other) -> List&`

  - Insert all elements inside :cpp:`other` into :cpp:`*this`.

- :cpp:`friend auto operator+(List const& lhs, List const& rhs) -> List`

  - Merge two :cpp:`List` as a :cpp:`List`.

- :cpp:`friend auto operator<<(std::ostream& ostream, List const& list) -> std::ostream&`

  - Output the stored :cpp:`std::string` objects with the format :code:`[element_1, element_2, ..., element_n]`.

The following has given part of the :cpp:`List`'s implementation and the :cpp:`main()` function.

.. literalinclude:: my_list.hpp
  :language: cpp
  :linenos:
  :caption: my_list.hpp

.. literalinclude:: main.cpp
  :language: cpp
  :linenos:
  :caption: main.cpp
